# .github/workflows/deploy.yml

name: Deploy Cloudflare Workers and KV Data

on:
  push:
    branches:
      - main # Trigger on pushes to the 'main' branch
    paths:
      - 'worker.js'        # Trigger if worker code changes
      - 'wrangler.toml'    # Trigger if wrangler config changes
      - 'brands_data.json' # Trigger if brand data changes

jobs:
  deploy:
    runs-on: ubuntu-latest # Use a standard Ubuntu runner
    
    # The 'strategy' block MUST be here, directly under the 'job' (deploy)
    strategy:
      matrix:
        include: 
          - account: "AU210"
            dyn2_val: "33" # Example value for AU218 - Websites
            dyn3_val: "30" # Example value for AU218 - Campaigns
    
    # These environment variables are set for EACH matrix run.
    # We use the 'format' function to dynamically select the correct secret based on matrix.account.
    env:
      CLOUDFLARE_API_TOKEN: ${{ secrets[format('CLOUDFLARE_API_TOKEN_{0}', matrix.account)] }} 
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets[format('CLOUDFLARE_ACCOUNT_ID_{0}', matrix.account)] }}
      KV_NAMESPACE_ID: ${{ secrets[format('KV_NAMESPACE_ID_{0}', matrix.account)] }}
      D1_DB_ID: ${{ secrets[format('D1_DB_ID_{0}', matrix.account)] }} 

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Get your code from the GitHub repository

      - name: Set up Node.js
        uses: actions/setup-node@v4 # Install Node.js
        with:
          node-version: '20' # Recommend Node.js 20 or newer

      - name: Install Wrangler CLI
        run: npm install -g wrangler # Install Cloudflare's CLI tool

      - name: Install jq (for JSON parsing)
        run: sudo apt-get update && sudo apt-get install -y jq # Install jq for processing JSON

      - name: Perform Deployment for ${{ matrix.account }}
        run: |
          if [ -z "$KV_NAMESPACE_ID" ]; then
            echo "‚ùå KV_NAMESPACE_ID is not set for ${{ matrix.account }}"
            exit 1
          fi
          set -e
          export WRANGLER_KV_NAMESPACE_BINDINGS='[{"binding":"BRAND_LINKS","id":"'"$KV_NAMESPACE_ID"'"}]'
          echo "Bindings: $WRANGLER_KV_NAMESPACE_BINDINGS"
          
          export AU_PREFIX=${{ matrix.account }}
          # Dynamic DYN2 and DYN3 values are now from the matrix include block
          export DYN2_VALUE=${{ matrix.dyn2_val }} # <-- Access dyn2_val from matrix
          export DYN3_VALUE=${{ matrix.dyn3_val }} # <-- Access dyn3_val from matrix

          echo "--- Deploying to Cloudflare account: ${{ matrix.account }} ---"
          echo "  Account ID: $CLOUDFLARE_ACCOUNT_ID"
          echo "  KV Namespace ID: $KV_NAMESPACE_ID"
          echo "  AU Prefix for Worker: $AU_PREFIX"
          echo "  DYN2 Value for Worker: $DYN2_VALUE"
          echo "  DYN3 Value for Worker: $DYN3_VALUE"
          echo "  D1 Database ID: $D1_DB_ID" #  For debugging
          echo "  Resolved CLOUDFLARE_API_TOKEN (masked): $CLOUDFLARE_API_TOKEN"

          

          # NEW: Step to auto-create/verify D1 table
          echo "    Executing D1 schema migration for click_log table..."
          wrangler d1 execute "${{ env.D1_DB_ID }}" --remote --command "CREATE TABLE IF NOT EXISTS click_log (id TEXT PRIMARY KEY, timestamp TEXT NOT NULL, gclid TEXT, final_url TEXT NOT NULL);"
          echo "    D1 schema migration complete."

          # --- Step B: Deploy Worker Code for the current account ---
          # Generate lowercase name in shell
          NAME="$(echo '${{ matrix.account }}' | tr '[:upper:]' '[:lower:]')-redirect"

          # Create a temporary wrangler config for this environment
          cp wrangler.toml wrangler.temp.toml

          # Replace placeholders in the temp config with actual values
          sed -i "s/REPLACED_ACCOUNT_ID/$CLOUDFLARE_ACCOUNT_ID/g" wrangler.temp.toml
          sed -i "s/REPLACED_KV_ID/$KV_NAMESPACE_ID/g" wrangler.temp.toml
          sed -i "s/REPLACED_AU_PREFIX/$AU_PREFIX/g" wrangler.temp.toml
          sed -i "s|REPLACED_DYN2|$DYN2_VALUE|g" wrangler.temp.toml # NEW: Replace DYN2
          sed -i "s|REPLACED_DYN3|$DYN3_VALUE|g" wrangler.temp.toml # NEW: Replace DYN3
          sed -i "s|REPLACED_D1_DB_ID|$D1_DB_ID|g" wrangler.temp.toml # NEW: Replace D1 DB ID placeholder

          # Deploy using the temp config
          wrangler deploy \
            --config wrangler.temp.toml \
            --minify \
            --name "$NAME"

          # Clean up temp config file
          rm wrangler.temp.toml
          
          # These echo statements MUST be on separate lines and not continue the previous command
          echo "--- Worker deployed for ${{ matrix.account }} ---"
          echo "---------------------------------------------------"